/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_STAKE_POOL_CONFIG_DISCRIMINATOR = new Uint8Array([0]);

export function getInitializeStakePoolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    INITIALIZE_STAKE_POOL_CONFIG_DISCRIMINATOR
  );
}

export type InitializeStakePoolConfigInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStakeMint extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStakeMint extends string
        ? ReadonlyAccount<TAccountStakeMint>
        : TAccountStakeMint,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeStakePoolConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  aprBps: bigint;
};

export type InitializeStakePoolConfigInstructionDataArgs = {
  aprBps: number | bigint;
};

export function getInitializeStakePoolConfigInstructionDataEncoder(): FixedSizeEncoder<InitializeStakePoolConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['aprBps', getU128Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_STAKE_POOL_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getInitializeStakePoolConfigInstructionDataDecoder(): FixedSizeDecoder<InitializeStakePoolConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['aprBps', getU128Decoder()],
  ]);
}

export function getInitializeStakePoolConfigInstructionDataCodec(): FixedSizeCodec<
  InitializeStakePoolConfigInstructionDataArgs,
  InitializeStakePoolConfigInstructionData
> {
  return combineCodec(
    getInitializeStakePoolConfigInstructionDataEncoder(),
    getInitializeStakePoolConfigInstructionDataDecoder()
  );
}

export type InitializeStakePoolConfigAsyncInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountStakeMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config?: Address<TAccountConfig>;
  stakeMint: Address<TAccountStakeMint>;
  rewardMint: Address<TAccountRewardMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  aprBps: InitializeStakePoolConfigInstructionDataArgs['aprBps'];
};

export async function getInitializeStakePoolConfigInstructionAsync<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountStakeMint extends string,
  TAccountRewardMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeStakePoolConfigAsyncInput<
    TAccountSigner,
    TAccountConfig,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeStakePoolConfigInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeStakePoolConfigInstructionDataEncoder().encode(
      args as InitializeStakePoolConfigInstructionDataArgs
    ),
  } as InitializeStakePoolConfigInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeStakePoolConfigInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountStakeMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  stakeMint: Address<TAccountStakeMint>;
  rewardMint: Address<TAccountRewardMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  aprBps: InitializeStakePoolConfigInstructionDataArgs['aprBps'];
};

export function getInitializeStakePoolConfigInstruction<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountStakeMint extends string,
  TAccountRewardMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeStakePoolConfigInput<
    TAccountSigner,
    TAccountConfig,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeStakePoolConfigInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountConfig,
  TAccountStakeMint,
  TAccountRewardMint,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    stakeMint: { value: input.stakeMint ?? null, isWritable: false },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stakeMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeStakePoolConfigInstructionDataEncoder().encode(
      args as InitializeStakePoolConfigInstructionDataArgs
    ),
  } as InitializeStakePoolConfigInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountStakeMint,
    TAccountRewardMint,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeStakePoolConfigInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    config: TAccountMetas[1];
    stakeMint: TAccountMetas[2];
    rewardMint: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeStakePoolConfigInstructionData;
};

export function parseInitializeStakePoolConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeStakePoolConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      config: getNextAccount(),
      stakeMint: getNextAccount(),
      rewardMint: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeStakePoolConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
