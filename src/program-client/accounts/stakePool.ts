/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const STAKE_POOL_DISCRIMINATOR = new Uint8Array([2]);

export function getStakePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(STAKE_POOL_DISCRIMINATOR);
}

export type StakePool = {
  discriminator: ReadonlyUint8Array;
  vault: Address;
  authority: Address;
  config: Address;
  interestIndex: bigint;
  interestIndexLastUpdated: bigint;
  bump: number;
};

export type StakePoolArgs = {
  vault: Address;
  authority: Address;
  config: Address;
  interestIndex: number | bigint;
  interestIndexLastUpdated: number | bigint;
  bump: number;
};

export function getStakePoolEncoder(): FixedSizeEncoder<StakePoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['vault', getAddressEncoder()],
      ['authority', getAddressEncoder()],
      ['config', getAddressEncoder()],
      ['interestIndex', getU128Encoder()],
      ['interestIndexLastUpdated', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_POOL_DISCRIMINATOR })
  );
}

export function getStakePoolDecoder(): FixedSizeDecoder<StakePool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['vault', getAddressDecoder()],
    ['authority', getAddressDecoder()],
    ['config', getAddressDecoder()],
    ['interestIndex', getU128Decoder()],
    ['interestIndexLastUpdated', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getStakePoolCodec(): FixedSizeCodec<StakePoolArgs, StakePool> {
  return combineCodec(getStakePoolEncoder(), getStakePoolDecoder());
}

export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakePool, TAddress>;
export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakePool, TAddress>;
export function decodeStakePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StakePool, TAddress> | MaybeAccount<StakePool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakePoolDecoder()
  );
}

export async function fetchStakePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakePool, TAddress>> {
  const maybeAccount = await fetchMaybeStakePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakePool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakePool(maybeAccount);
}

export async function fetchAllStakePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakePool>[]> {
  const maybeAccounts = await fetchAllMaybeStakePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakePool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStakePool(maybeAccount));
}

export function getStakePoolSize(): number {
  return 122;
}
