/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** VaultMismatch: The provided vault account does not match the pool vault. */
export const STAKING_PROGRAM_ERROR__VAULT_MISMATCH = 0x1770; // 6000
/** InsufficientStake: Insufficient stake amount. */
export const STAKING_PROGRAM_ERROR__INSUFFICIENT_STAKE = 0x1771; // 6001
/** RewardCalculationError: Something bad happened with the rewards calculation */
export const STAKING_PROGRAM_ERROR__REWARD_CALCULATION_ERROR = 0x1772; // 6002
/** SameAPR: The provided APR is the same as the current APR. */
export const STAKING_PROGRAM_ERROR__SAME_A_P_R = 0x1773; // 6003
/** InvalidStakeMint: The provided stake mint does not match the config stake mint. */
export const STAKING_PROGRAM_ERROR__INVALID_STAKE_MINT = 0x1774; // 6004
/** InvalidRewardMint: The provided reward mint does not match the config reward mint. */
export const STAKING_PROGRAM_ERROR__INVALID_REWARD_MINT = 0x1775; // 6005
/** InvalidStakeAuthority: The provided stake authority does not match the config authority. */
export const STAKING_PROGRAM_ERROR__INVALID_STAKE_AUTHORITY = 0x1776; // 6006
/** DivisionByZero: Division by zero occurred. */
export const STAKING_PROGRAM_ERROR__DIVISION_BY_ZERO = 0x1777; // 6007
/** Overflow: Arithmetic overflow occurred. */
export const STAKING_PROGRAM_ERROR__OVERFLOW = 0x1778; // 6008
/** MintDecimalsTooHigh: The provided mint decimals are too high. Maximum allowed is 12. */
export const STAKING_PROGRAM_ERROR__MINT_DECIMALS_TOO_HIGH = 0x1779; // 6009
/** InvalidTimestamp: The provided timestamp is invalid. */
export const STAKING_PROGRAM_ERROR__INVALID_TIMESTAMP = 0x177a; // 6010
/** NoStakedAmount: The provided stake account does not have a staked amount. */
export const STAKING_PROGRAM_ERROR__NO_STAKED_AMOUNT = 0x177b; // 6011
/** ZeroStakeAmount: The provided stake amount is less than the minimum required. */
export const STAKING_PROGRAM_ERROR__ZERO_STAKE_AMOUNT = 0x177c; // 6012
/** NonZeroStake: The stake account has a non-zero staked amount. */
export const STAKING_PROGRAM_ERROR__NON_ZERO_STAKE = 0x177d; // 6013
/** NonZeroPendingRewards: The stake account has a non-zero pending rewards amount. */
export const STAKING_PROGRAM_ERROR__NON_ZERO_PENDING_REWARDS = 0x177e; // 6014

export type StakingProgramError =
  | typeof STAKING_PROGRAM_ERROR__DIVISION_BY_ZERO
  | typeof STAKING_PROGRAM_ERROR__INSUFFICIENT_STAKE
  | typeof STAKING_PROGRAM_ERROR__INVALID_REWARD_MINT
  | typeof STAKING_PROGRAM_ERROR__INVALID_STAKE_AUTHORITY
  | typeof STAKING_PROGRAM_ERROR__INVALID_STAKE_MINT
  | typeof STAKING_PROGRAM_ERROR__INVALID_TIMESTAMP
  | typeof STAKING_PROGRAM_ERROR__MINT_DECIMALS_TOO_HIGH
  | typeof STAKING_PROGRAM_ERROR__NON_ZERO_PENDING_REWARDS
  | typeof STAKING_PROGRAM_ERROR__NON_ZERO_STAKE
  | typeof STAKING_PROGRAM_ERROR__NO_STAKED_AMOUNT
  | typeof STAKING_PROGRAM_ERROR__OVERFLOW
  | typeof STAKING_PROGRAM_ERROR__REWARD_CALCULATION_ERROR
  | typeof STAKING_PROGRAM_ERROR__SAME_A_P_R
  | typeof STAKING_PROGRAM_ERROR__VAULT_MISMATCH
  | typeof STAKING_PROGRAM_ERROR__ZERO_STAKE_AMOUNT;

let stakingProgramErrorMessages:
  | Record<StakingProgramError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  stakingProgramErrorMessages = {
    [STAKING_PROGRAM_ERROR__DIVISION_BY_ZERO]: `Division by zero occurred.`,
    [STAKING_PROGRAM_ERROR__INSUFFICIENT_STAKE]: `Insufficient stake amount.`,
    [STAKING_PROGRAM_ERROR__INVALID_REWARD_MINT]: `The provided reward mint does not match the config reward mint.`,
    [STAKING_PROGRAM_ERROR__INVALID_STAKE_AUTHORITY]: `The provided stake authority does not match the config authority.`,
    [STAKING_PROGRAM_ERROR__INVALID_STAKE_MINT]: `The provided stake mint does not match the config stake mint.`,
    [STAKING_PROGRAM_ERROR__INVALID_TIMESTAMP]: `The provided timestamp is invalid.`,
    [STAKING_PROGRAM_ERROR__MINT_DECIMALS_TOO_HIGH]: `The provided mint decimals are too high. Maximum allowed is 12.`,
    [STAKING_PROGRAM_ERROR__NON_ZERO_PENDING_REWARDS]: `The stake account has a non-zero pending rewards amount.`,
    [STAKING_PROGRAM_ERROR__NON_ZERO_STAKE]: `The stake account has a non-zero staked amount.`,
    [STAKING_PROGRAM_ERROR__NO_STAKED_AMOUNT]: `The provided stake account does not have a staked amount.`,
    [STAKING_PROGRAM_ERROR__OVERFLOW]: `Arithmetic overflow occurred.`,
    [STAKING_PROGRAM_ERROR__REWARD_CALCULATION_ERROR]: `Something bad happened with the rewards calculation`,
    [STAKING_PROGRAM_ERROR__SAME_A_P_R]: `The provided APR is the same as the current APR.`,
    [STAKING_PROGRAM_ERROR__VAULT_MISMATCH]: `The provided vault account does not match the pool vault.`,
    [STAKING_PROGRAM_ERROR__ZERO_STAKE_AMOUNT]: `The provided stake amount is less than the minimum required.`,
  };
}

export function getStakingProgramErrorMessage(
  code: StakingProgramError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (stakingProgramErrorMessages as Record<StakingProgramError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isStakingProgramError<
  TProgramErrorCode extends StakingProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    STAKING_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
