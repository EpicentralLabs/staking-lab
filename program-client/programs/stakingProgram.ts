/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedClaimRewardsInstruction,
  type ParsedDeleteStakePoolConfigInstruction,
  type ParsedDeleteStakePoolInstruction,
  type ParsedInitializeStakePoolConfigInstruction,
  type ParsedInitializeStakePoolInstruction,
  type ParsedInitializeXlabsMintInstruction,
  type ParsedStakeToStakePoolInstruction,
  type ParsedUnstakeFromStakePoolInstruction,
  type ParsedUpdateStakePoolConfigInstruction,
} from '../instructions';

export const STAKING_PROGRAM_PROGRAM_ADDRESS =
  '5BzVKnqRHDzPUiX8AZmqqSPxpTVuB7TXdoRZSFdNq1dm' as Address<'5BzVKnqRHDzPUiX8AZmqqSPxpTVuB7TXdoRZSFdNq1dm'>;

export enum StakingProgramAccount {
  StakeAccount,
  StakePool,
  StakePoolConfig,
}

export function identifyStakingProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StakingProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([3])),
      0
    )
  ) {
    return StakingProgramAccount.StakeAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([2])),
      0
    )
  ) {
    return StakingProgramAccount.StakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])),
      0
    )
  ) {
    return StakingProgramAccount.StakePoolConfig;
  }
  throw new Error(
    'The provided account could not be identified as a stakingProgram account.'
  );
}

export enum StakingProgramInstruction {
  ClaimRewards,
  DeleteStakePool,
  DeleteStakePoolConfig,
  InitializeStakePool,
  InitializeStakePoolConfig,
  InitializeXlabsMint,
  StakeToStakePool,
  UnstakeFromStakePool,
  UpdateStakePoolConfig,
}

export function identifyStakingProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StakingProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([7])),
      0
    )
  ) {
    return StakingProgramInstruction.ClaimRewards;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([4])),
      0
    )
  ) {
    return StakingProgramInstruction.DeleteStakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([2])),
      0
    )
  ) {
    return StakingProgramInstruction.DeleteStakePoolConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([3])),
      0
    )
  ) {
    return StakingProgramInstruction.InitializeStakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([0])),
      0
    )
  ) {
    return StakingProgramInstruction.InitializeStakePoolConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([8])),
      0
    )
  ) {
    return StakingProgramInstruction.InitializeXlabsMint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([5])),
      0
    )
  ) {
    return StakingProgramInstruction.StakeToStakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([6])),
      0
    )
  ) {
    return StakingProgramInstruction.UnstakeFromStakePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 1).encode(new Uint8Array([1])),
      0
    )
  ) {
    return StakingProgramInstruction.UpdateStakePoolConfig;
  }
  throw new Error(
    'The provided instruction could not be identified as a stakingProgram instruction.'
  );
}

export type ParsedStakingProgramInstruction<
  TProgram extends string = '5BzVKnqRHDzPUiX8AZmqqSPxpTVuB7TXdoRZSFdNq1dm',
> =
  | ({
      instructionType: StakingProgramInstruction.ClaimRewards;
    } & ParsedClaimRewardsInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.DeleteStakePool;
    } & ParsedDeleteStakePoolInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.DeleteStakePoolConfig;
    } & ParsedDeleteStakePoolConfigInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.InitializeStakePool;
    } & ParsedInitializeStakePoolInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.InitializeStakePoolConfig;
    } & ParsedInitializeStakePoolConfigInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.InitializeXlabsMint;
    } & ParsedInitializeXlabsMintInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.StakeToStakePool;
    } & ParsedStakeToStakePoolInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.UnstakeFromStakePool;
    } & ParsedUnstakeFromStakePoolInstruction<TProgram>)
  | ({
      instructionType: StakingProgramInstruction.UpdateStakePoolConfig;
    } & ParsedUpdateStakePoolConfigInstruction<TProgram>);
