/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_STAKE_POOL_CONFIG_DISCRIMINATOR = new Uint8Array([1]);

export function getUpdateStakePoolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    UPDATE_STAKE_POOL_CONFIG_DISCRIMINATOR
  );
}

export type UpdateStakePoolConfigInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateStakePoolConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  aprBps: bigint;
};

export type UpdateStakePoolConfigInstructionDataArgs = {
  aprBps: number | bigint;
};

export function getUpdateStakePoolConfigInstructionDataEncoder(): FixedSizeEncoder<UpdateStakePoolConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['aprBps', getU128Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_STAKE_POOL_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getUpdateStakePoolConfigInstructionDataDecoder(): FixedSizeDecoder<UpdateStakePoolConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['aprBps', getU128Decoder()],
  ]);
}

export function getUpdateStakePoolConfigInstructionDataCodec(): FixedSizeCodec<
  UpdateStakePoolConfigInstructionDataArgs,
  UpdateStakePoolConfigInstructionData
> {
  return combineCodec(
    getUpdateStakePoolConfigInstructionDataEncoder(),
    getUpdateStakePoolConfigInstructionDataDecoder()
  );
}

export type UpdateStakePoolConfigAsyncInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountStakePool extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config?: Address<TAccountConfig>;
  stakePool?: Address<TAccountStakePool>;
  aprBps: UpdateStakePoolConfigInstructionDataArgs['aprBps'];
};

export async function getUpdateStakePoolConfigInstructionAsync<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountStakePool extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UpdateStakePoolConfigAsyncInput<
    TAccountSigner,
    TAccountConfig,
    TAccountStakePool
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateStakePoolConfigInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountStakePool
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.stakePool.value) {
    accounts.stakePool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 97, 107, 101, 95, 112, 111, 111, 108])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stakePool),
    ],
    programAddress,
    data: getUpdateStakePoolConfigInstructionDataEncoder().encode(
      args as UpdateStakePoolConfigInstructionDataArgs
    ),
  } as UpdateStakePoolConfigInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountStakePool
  >;

  return instruction;
}

export type UpdateStakePoolConfigInput<
  TAccountSigner extends string = string,
  TAccountConfig extends string = string,
  TAccountStakePool extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  config: Address<TAccountConfig>;
  stakePool: Address<TAccountStakePool>;
  aprBps: UpdateStakePoolConfigInstructionDataArgs['aprBps'];
};

export function getUpdateStakePoolConfigInstruction<
  TAccountSigner extends string,
  TAccountConfig extends string,
  TAccountStakePool extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UpdateStakePoolConfigInput<
    TAccountSigner,
    TAccountConfig,
    TAccountStakePool
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateStakePoolConfigInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountConfig,
  TAccountStakePool
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.stakePool),
    ],
    programAddress,
    data: getUpdateStakePoolConfigInstructionDataEncoder().encode(
      args as UpdateStakePoolConfigInstructionDataArgs
    ),
  } as UpdateStakePoolConfigInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountConfig,
    TAccountStakePool
  >;

  return instruction;
}

export type ParsedUpdateStakePoolConfigInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    config: TAccountMetas[1];
    stakePool: TAccountMetas[2];
  };
  data: UpdateStakePoolConfigInstructionData;
};

export function parseUpdateStakePoolConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateStakePoolConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      config: getNextAccount(),
      stakePool: getNextAccount(),
    },
    data: getUpdateStakePoolConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
