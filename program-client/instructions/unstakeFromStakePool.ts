/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UNSTAKE_FROM_STAKE_POOL_DISCRIMINATOR = new Uint8Array([6]);

export function getUnstakeFromStakePoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    UNSTAKE_FROM_STAKE_POOL_DISCRIMINATOR
  );
}

export type UnstakeFromStakePoolInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountStakePoolConfig extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountUserAssociatedTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountStakingTokenMint extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountUserRewardAssociatedTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakePoolConfig extends string
        ? ReadonlyAccount<TAccountStakePoolConfig>
        : TAccountStakePoolConfig,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountUserAssociatedTokenAccount extends string
        ? WritableAccount<TAccountUserAssociatedTokenAccount>
        : TAccountUserAssociatedTokenAccount,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountStakingTokenMint extends string
        ? ReadonlyAccount<TAccountStakingTokenMint>
        : TAccountStakingTokenMint,
      TAccountRewardMint extends string
        ? WritableAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountUserRewardAssociatedTokenAccount extends string
        ? WritableAccount<TAccountUserRewardAssociatedTokenAccount>
        : TAccountUserRewardAssociatedTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UnstakeFromStakePoolInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type UnstakeFromStakePoolInstructionDataArgs = {
  amount: number | bigint;
};

export function getUnstakeFromStakePoolInstructionDataEncoder(): FixedSizeEncoder<UnstakeFromStakePoolInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: UNSTAKE_FROM_STAKE_POOL_DISCRIMINATOR,
    })
  );
}

export function getUnstakeFromStakePoolInstructionDataDecoder(): FixedSizeDecoder<UnstakeFromStakePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['amount', getU64Decoder()],
  ]);
}

export function getUnstakeFromStakePoolInstructionDataCodec(): FixedSizeCodec<
  UnstakeFromStakePoolInstructionDataArgs,
  UnstakeFromStakePoolInstructionData
> {
  return combineCodec(
    getUnstakeFromStakePoolInstructionDataEncoder(),
    getUnstakeFromStakePoolInstructionDataDecoder()
  );
}

export type UnstakeFromStakePoolAsyncInput<
  TAccountUser extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakePoolConfig extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountUserAssociatedTokenAccount extends string = string,
  TAccountVault extends string = string,
  TAccountStakingTokenMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserRewardAssociatedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  stakePool?: Address<TAccountStakePool>;
  stakePoolConfig?: Address<TAccountStakePoolConfig>;
  stakeAccount?: Address<TAccountStakeAccount>;
  userAssociatedTokenAccount: Address<TAccountUserAssociatedTokenAccount>;
  vault: Address<TAccountVault>;
  stakingTokenMint: Address<TAccountStakingTokenMint>;
  rewardMint?: Address<TAccountRewardMint>;
  userRewardAssociatedTokenAccount?: Address<TAccountUserRewardAssociatedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: UnstakeFromStakePoolInstructionDataArgs['amount'];
};

export async function getUnstakeFromStakePoolInstructionAsync<
  TAccountUser extends string,
  TAccountStakePool extends string,
  TAccountStakePoolConfig extends string,
  TAccountStakeAccount extends string,
  TAccountUserAssociatedTokenAccount extends string,
  TAccountVault extends string,
  TAccountStakingTokenMint extends string,
  TAccountRewardMint extends string,
  TAccountUserRewardAssociatedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UnstakeFromStakePoolAsyncInput<
    TAccountUser,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountUserAssociatedTokenAccount,
    TAccountVault,
    TAccountStakingTokenMint,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UnstakeFromStakePoolInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountUserAssociatedTokenAccount,
    TAccountVault,
    TAccountStakingTokenMint,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    stakePoolConfig: {
      value: input.stakePoolConfig ?? null,
      isWritable: false,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    userAssociatedTokenAccount: {
      value: input.userAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    stakingTokenMint: {
      value: input.stakingTokenMint ?? null,
      isWritable: false,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: true },
    userRewardAssociatedTokenAccount: {
      value: input.userRewardAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.stakePool.value) {
    accounts.stakePool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 97, 107, 101, 95, 112, 111, 111, 108])
        ),
      ],
    });
  }
  if (!accounts.stakePoolConfig.value) {
    accounts.stakePoolConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.stakeAccount.value) {
    accounts.stakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 97, 107, 101, 95, 97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.rewardMint.value) {
    accounts.rewardMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([120, 108, 97, 98, 115, 95, 109, 105, 110, 116])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.userRewardAssociatedTokenAccount.value) {
    accounts.userRewardAssociatedTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(expectAddress(accounts.user.value)),
          getAddressEncoder().encode(
            expectAddress(accounts.tokenProgram.value)
          ),
          getAddressEncoder().encode(expectAddress(accounts.rewardMint.value)),
        ],
      });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolConfig),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.userAssociatedTokenAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.stakingTokenMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userRewardAssociatedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUnstakeFromStakePoolInstructionDataEncoder().encode(
      args as UnstakeFromStakePoolInstructionDataArgs
    ),
  } as UnstakeFromStakePoolInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountUserAssociatedTokenAccount,
    TAccountVault,
    TAccountStakingTokenMint,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type UnstakeFromStakePoolInput<
  TAccountUser extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakePoolConfig extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountUserAssociatedTokenAccount extends string = string,
  TAccountVault extends string = string,
  TAccountStakingTokenMint extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserRewardAssociatedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  stakePool: Address<TAccountStakePool>;
  stakePoolConfig: Address<TAccountStakePoolConfig>;
  stakeAccount: Address<TAccountStakeAccount>;
  userAssociatedTokenAccount: Address<TAccountUserAssociatedTokenAccount>;
  vault: Address<TAccountVault>;
  stakingTokenMint: Address<TAccountStakingTokenMint>;
  rewardMint: Address<TAccountRewardMint>;
  userRewardAssociatedTokenAccount: Address<TAccountUserRewardAssociatedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: UnstakeFromStakePoolInstructionDataArgs['amount'];
};

export function getUnstakeFromStakePoolInstruction<
  TAccountUser extends string,
  TAccountStakePool extends string,
  TAccountStakePoolConfig extends string,
  TAccountStakeAccount extends string,
  TAccountUserAssociatedTokenAccount extends string,
  TAccountVault extends string,
  TAccountStakingTokenMint extends string,
  TAccountRewardMint extends string,
  TAccountUserRewardAssociatedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: UnstakeFromStakePoolInput<
    TAccountUser,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountUserAssociatedTokenAccount,
    TAccountVault,
    TAccountStakingTokenMint,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): UnstakeFromStakePoolInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountStakePool,
  TAccountStakePoolConfig,
  TAccountStakeAccount,
  TAccountUserAssociatedTokenAccount,
  TAccountVault,
  TAccountStakingTokenMint,
  TAccountRewardMint,
  TAccountUserRewardAssociatedTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    stakePoolConfig: {
      value: input.stakePoolConfig ?? null,
      isWritable: false,
    },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    userAssociatedTokenAccount: {
      value: input.userAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    stakingTokenMint: {
      value: input.stakingTokenMint ?? null,
      isWritable: false,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: true },
    userRewardAssociatedTokenAccount: {
      value: input.userRewardAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolConfig),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.userAssociatedTokenAccount),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.stakingTokenMint),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userRewardAssociatedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUnstakeFromStakePoolInstructionDataEncoder().encode(
      args as UnstakeFromStakePoolInstructionDataArgs
    ),
  } as UnstakeFromStakePoolInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountUserAssociatedTokenAccount,
    TAccountVault,
    TAccountStakingTokenMint,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUnstakeFromStakePoolInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    stakePoolConfig: TAccountMetas[2];
    stakeAccount: TAccountMetas[3];
    userAssociatedTokenAccount: TAccountMetas[4];
    vault: TAccountMetas[5];
    stakingTokenMint: TAccountMetas[6];
    rewardMint: TAccountMetas[7];
    userRewardAssociatedTokenAccount: TAccountMetas[8];
    tokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: UnstakeFromStakePoolInstructionData;
};

export function parseUnstakeFromStakePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUnstakeFromStakePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      stakePool: getNextAccount(),
      stakePoolConfig: getNextAccount(),
      stakeAccount: getNextAccount(),
      userAssociatedTokenAccount: getNextAccount(),
      vault: getNextAccount(),
      stakingTokenMint: getNextAccount(),
      rewardMint: getNextAccount(),
      userRewardAssociatedTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUnstakeFromStakePoolInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
