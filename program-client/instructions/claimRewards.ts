/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { STAKING_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_REWARDS_DISCRIMINATOR = new Uint8Array([7]);

export function getClaimRewardsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CLAIM_REWARDS_DISCRIMINATOR
  );
}

export type ClaimRewardsInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountStakePool extends string | AccountMeta<string> = string,
  TAccountStakePoolConfig extends string | AccountMeta<string> = string,
  TAccountStakeAccount extends string | AccountMeta<string> = string,
  TAccountRewardMint extends string | AccountMeta<string> = string,
  TAccountUserRewardAssociatedTokenAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountStakePool extends string
        ? WritableAccount<TAccountStakePool>
        : TAccountStakePool,
      TAccountStakePoolConfig extends string
        ? WritableAccount<TAccountStakePoolConfig>
        : TAccountStakePoolConfig,
      TAccountStakeAccount extends string
        ? WritableAccount<TAccountStakeAccount>
        : TAccountStakeAccount,
      TAccountRewardMint extends string
        ? WritableAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountUserRewardAssociatedTokenAccount extends string
        ? WritableAccount<TAccountUserRewardAssociatedTokenAccount>
        : TAccountUserRewardAssociatedTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimRewardsInstructionData = { discriminator: ReadonlyUint8Array };

export type ClaimRewardsInstructionDataArgs = {};

export function getClaimRewardsInstructionDataEncoder(): FixedSizeEncoder<ClaimRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 1)]]),
    (value) => ({ ...value, discriminator: CLAIM_REWARDS_DISCRIMINATOR })
  );
}

export function getClaimRewardsInstructionDataDecoder(): FixedSizeDecoder<ClaimRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getClaimRewardsInstructionDataCodec(): FixedSizeCodec<
  ClaimRewardsInstructionDataArgs,
  ClaimRewardsInstructionData
> {
  return combineCodec(
    getClaimRewardsInstructionDataEncoder(),
    getClaimRewardsInstructionDataDecoder()
  );
}

export type ClaimRewardsAsyncInput<
  TAccountSigner extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakePoolConfig extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserRewardAssociatedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  stakePool?: Address<TAccountStakePool>;
  stakePoolConfig?: Address<TAccountStakePoolConfig>;
  stakeAccount?: Address<TAccountStakeAccount>;
  rewardMint?: Address<TAccountRewardMint>;
  userRewardAssociatedTokenAccount?: Address<TAccountUserRewardAssociatedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getClaimRewardsInstructionAsync<
  TAccountSigner extends string,
  TAccountStakePool extends string,
  TAccountStakePoolConfig extends string,
  TAccountStakeAccount extends string,
  TAccountRewardMint extends string,
  TAccountUserRewardAssociatedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ClaimRewardsAsyncInput<
    TAccountSigner,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimRewardsInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    stakePoolConfig: { value: input.stakePoolConfig ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: true },
    userRewardAssociatedTokenAccount: {
      value: input.userRewardAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.stakePool.value) {
    accounts.stakePool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 97, 107, 101, 95, 112, 111, 111, 108])
        ),
      ],
    });
  }
  if (!accounts.stakePoolConfig.value) {
    accounts.stakePoolConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.stakeAccount.value) {
    accounts.stakeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 97, 107, 101, 95, 97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.stakePool.value)),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.rewardMint.value) {
    accounts.rewardMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([120, 108, 97, 98, 115, 95, 109, 105, 110, 116])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.userRewardAssociatedTokenAccount.value) {
    accounts.userRewardAssociatedTokenAccount.value =
      await getProgramDerivedAddress({
        programAddress:
          'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
        seeds: [
          getAddressEncoder().encode(expectAddress(accounts.signer.value)),
          getAddressEncoder().encode(
            expectAddress(accounts.tokenProgram.value)
          ),
          getAddressEncoder().encode(expectAddress(accounts.rewardMint.value)),
        ],
      });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolConfig),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userRewardAssociatedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimRewardsInstructionDataEncoder().encode({}),
  } as ClaimRewardsInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimRewardsInput<
  TAccountSigner extends string = string,
  TAccountStakePool extends string = string,
  TAccountStakePoolConfig extends string = string,
  TAccountStakeAccount extends string = string,
  TAccountRewardMint extends string = string,
  TAccountUserRewardAssociatedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  stakePool: Address<TAccountStakePool>;
  stakePoolConfig: Address<TAccountStakePoolConfig>;
  stakeAccount: Address<TAccountStakeAccount>;
  rewardMint: Address<TAccountRewardMint>;
  userRewardAssociatedTokenAccount: Address<TAccountUserRewardAssociatedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getClaimRewardsInstruction<
  TAccountSigner extends string,
  TAccountStakePool extends string,
  TAccountStakePoolConfig extends string,
  TAccountStakeAccount extends string,
  TAccountRewardMint extends string,
  TAccountUserRewardAssociatedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ClaimRewardsInput<
    TAccountSigner,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimRewardsInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountStakePool,
  TAccountStakePoolConfig,
  TAccountStakeAccount,
  TAccountRewardMint,
  TAccountUserRewardAssociatedTokenAccount,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? STAKING_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    stakePool: { value: input.stakePool ?? null, isWritable: true },
    stakePoolConfig: { value: input.stakePoolConfig ?? null, isWritable: true },
    stakeAccount: { value: input.stakeAccount ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: true },
    userRewardAssociatedTokenAccount: {
      value: input.userRewardAssociatedTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.stakePool),
      getAccountMeta(accounts.stakePoolConfig),
      getAccountMeta(accounts.stakeAccount),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.userRewardAssociatedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimRewardsInstructionDataEncoder().encode({}),
  } as ClaimRewardsInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStakePool,
    TAccountStakePoolConfig,
    TAccountStakeAccount,
    TAccountRewardMint,
    TAccountUserRewardAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimRewardsInstruction<
  TProgram extends string = typeof STAKING_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    stakePool: TAccountMetas[1];
    stakePoolConfig: TAccountMetas[2];
    stakeAccount: TAccountMetas[3];
    rewardMint: TAccountMetas[4];
    userRewardAssociatedTokenAccount: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: ClaimRewardsInstructionData;
};

export function parseClaimRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      stakePool: getNextAccount(),
      stakePoolConfig: getNextAccount(),
      stakeAccount: getNextAccount(),
      rewardMint: getNextAccount(),
      userRewardAssociatedTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
