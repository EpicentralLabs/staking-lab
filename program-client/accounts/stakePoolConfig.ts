/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const STAKE_POOL_CONFIG_DISCRIMINATOR = new Uint8Array([1]);

export function getStakePoolConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    STAKE_POOL_CONFIG_DISCRIMINATOR
  );
}

export type StakePoolConfig = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  stakeMint: Address;
  rewardMint: Address;
  aprBps: bigint;
  bump: number;
};

export type StakePoolConfigArgs = {
  authority: Address;
  stakeMint: Address;
  rewardMint: Address;
  aprBps: number | bigint;
  bump: number;
};

export function getStakePoolConfigEncoder(): FixedSizeEncoder<StakePoolConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['authority', getAddressEncoder()],
      ['stakeMint', getAddressEncoder()],
      ['rewardMint', getAddressEncoder()],
      ['aprBps', getU128Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKE_POOL_CONFIG_DISCRIMINATOR })
  );
}

export function getStakePoolConfigDecoder(): FixedSizeDecoder<StakePoolConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['authority', getAddressDecoder()],
    ['stakeMint', getAddressDecoder()],
    ['rewardMint', getAddressDecoder()],
    ['aprBps', getU128Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getStakePoolConfigCodec(): FixedSizeCodec<
  StakePoolConfigArgs,
  StakePoolConfig
> {
  return combineCodec(getStakePoolConfigEncoder(), getStakePoolConfigDecoder());
}

export function decodeStakePoolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StakePoolConfig, TAddress>;
export function decodeStakePoolConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StakePoolConfig, TAddress>;
export function decodeStakePoolConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<StakePoolConfig, TAddress>
  | MaybeAccount<StakePoolConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakePoolConfigDecoder()
  );
}

export async function fetchStakePoolConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StakePoolConfig, TAddress>> {
  const maybeAccount = await fetchMaybeStakePoolConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakePoolConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StakePoolConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakePoolConfig(maybeAccount);
}

export async function fetchAllStakePoolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StakePoolConfig>[]> {
  const maybeAccounts = await fetchAllMaybeStakePoolConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakePoolConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StakePoolConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeStakePoolConfig(maybeAccount)
  );
}

export function getStakePoolConfigSize(): number {
  return 114;
}
