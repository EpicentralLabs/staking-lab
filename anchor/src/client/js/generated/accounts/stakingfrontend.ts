/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const STAKINGFRONTEND_DISCRIMINATOR = new Uint8Array([
  23, 103, 57, 214, 6, 20, 71, 13,
]);

export function getStakingfrontendDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STAKINGFRONTEND_DISCRIMINATOR
  );
}

export type Stakingfrontend = {
  discriminator: ReadonlyUint8Array;
  count: number;
};

export type StakingfrontendArgs = { count: number };

export function getStakingfrontendEncoder(): FixedSizeEncoder<StakingfrontendArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['count', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STAKINGFRONTEND_DISCRIMINATOR })
  );
}

export function getStakingfrontendDecoder(): FixedSizeDecoder<Stakingfrontend> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['count', getU8Decoder()],
  ]);
}

export function getStakingfrontendCodec(): FixedSizeCodec<
  StakingfrontendArgs,
  Stakingfrontend
> {
  return combineCodec(getStakingfrontendEncoder(), getStakingfrontendDecoder());
}

export function decodeStakingfrontend<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Stakingfrontend, TAddress>;
export function decodeStakingfrontend<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Stakingfrontend, TAddress>;
export function decodeStakingfrontend<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<Stakingfrontend, TAddress>
  | MaybeAccount<Stakingfrontend, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStakingfrontendDecoder()
  );
}

export async function fetchStakingfrontend<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Stakingfrontend, TAddress>> {
  const maybeAccount = await fetchMaybeStakingfrontend(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStakingfrontend<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Stakingfrontend, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStakingfrontend(maybeAccount);
}

export async function fetchAllStakingfrontend(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Stakingfrontend>[]> {
  const maybeAccounts = await fetchAllMaybeStakingfrontend(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStakingfrontend(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Stakingfrontend>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeStakingfrontend(maybeAccount)
  );
}

export function getStakingfrontendSize(): number {
  return 9;
}
